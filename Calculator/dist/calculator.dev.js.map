{"version":3,"sources":["calculator.js"],"names":["display","document","querySelector","colorButtons","querySelectorAll","plusButton","equalsButton","clearButton","expression","forEach","button","addEventListener","colorName","textContent","result","evaluateExpression","cleanedExpression","replace","parts","split","colors","part","trim","mixColors","error","console","color1","color2","clickSound","Audio","currentTime","play","colorCode","style","backgroundColor","currentColor"],"mappings":";;AAAA,IAAIA,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAd;AACA,IAAIC,YAAY,GAAGF,QAAQ,CAACG,gBAAT,CAA0B,QAA1B,CAAnB;AACA,IAAIC,UAAU,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAjB;AACA,IAAII,YAAY,GAAGL,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAnB;AACA,IAAIK,WAAW,GAAGN,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAlB;AAEA,IAAIM,UAAU,GAAG,EAAjB;AAEAL,YAAY,CAACM,OAAb,CAAqB,UAAAC,MAAM,EAAI;AAC3BA,EAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,YAAM;AACnC;AACA,QAAIC,SAAS,GAAGF,MAAM,CAACG,WAAvB,CAFmC,CAGnC;;AACAL,IAAAA,UAAU,IAAII,SAAd,CAJmC,CAKnC;;AACAZ,IAAAA,OAAO,CAACa,WAAR,GAAsBL,UAAtB;AACH,GAPD;AAQH,CATD;AAWAH,UAAU,CAACM,gBAAX,CAA4B,OAA5B,EAAqC,YAAM;AACvC;AACAH,EAAAA,UAAU,IAAI,KAAd,CAFuC,CAGvC;;AACAR,EAAAA,OAAO,CAACa,WAAR,GAAsBL,UAAtB;AACH,CALD;AAOAF,YAAY,CAACK,gBAAb,CAA8B,OAA9B,EAAuC,YAAM;AACzC;AACA,MAAIG,MAAM,GAAGC,kBAAkB,CAACP,UAAD,CAA/B,CAFyC,CAGzC;;AACAR,EAAAA,OAAO,CAACa,WAAR,GAAsBC,MAAtB,CAJyC,CAKzC;;AACAN,EAAAA,UAAU,GAAG,EAAb;AACH,CAPD;AASAD,WAAW,CAACI,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AACxC;AACAX,EAAAA,OAAO,CAACa,WAAR,GAAsB,EAAtB;AACAL,EAAAA,UAAU,GAAG,EAAb;AACH,CAJD,E,CAMA;;AACA,SAASO,kBAAT,CAA4BP,UAA5B,EAAwC;AACpC,MAAI;AACA;AACA,QAAIQ,iBAAiB,GAAGR,UAAU,CAACS,OAAX,CAAmB,MAAnB,EAA2B,EAA3B,CAAxB,CAFA,CAGA;;AACA,QAAIC,KAAK,GAAGF,iBAAiB,CAACG,KAAlB,CAAwB,GAAxB,CAAZ;AACA,QAAIL,MAAM,GAAG,OAAb,CALA,CAKsB;AACtB;;AACA,QAAIM,MAAM,GAAG;AACT,aAAO,KADE;AAET,eAAS,OAFA;AAGT,cAAQ,MAHC;AAIT,eAAS,OAJA,CAIS;AAClB;;AALS,KAAb,CAPA,CAcA;;AAdA;AAAA;AAAA;;AAAA;AAeA,2BAAiBF,KAAjB,8HAAwB;AAAA,YAAfG,IAAe;AACpB,YAAIT,SAAS,GAAGS,IAAI,CAACC,IAAL,EAAhB;;AACA,YAAIF,MAAM,CAACR,SAAD,CAAV,EAAuB;AACnB;AACAE,UAAAA,MAAM,GAAGS,SAAS,CAACT,MAAD,EAASM,MAAM,CAACR,SAAD,CAAf,CAAlB;AACH;AACJ;AArBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,WAAOE,MAAP;AACH,GAvBD,CAuBE,OAAOU,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACA,WAAO,OAAP;AACH;AACJ,C,CAED;;;AACA,SAASD,SAAT,CAAmBG,MAAnB,EAA2BC,MAA3B,EAAmC;AAC/B;AACA;AACA;AACA;AACA,SAAO,QAAP,CAL+B,CAKd;AACpB,C,CAED;;;AAEA,IAAIC,UAAU,GAAG,IAAIC,KAAJ,CAAU,WAAV,CAAjB,C,CAAyC;;AAEzC1B,YAAY,CAACM,OAAb,CAAqB,UAAAC,MAAM,EAAI;AAC3BA,EAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,YAAM;AACnC;AACAiB,IAAAA,UAAU,CAACE,WAAX,GAAyB,CAAzB,CAFmC,CAEP;;AAC5BF,IAAAA,UAAU,CAACG,IAAX,GAHmC,CAKnC;;AACA,QAAIC,SAAS,GAAGtB,MAAM,CAACuB,KAAP,CAAaC,eAA7B,CANmC,CAOnC;;AACAlC,IAAAA,OAAO,CAACiC,KAAR,CAAcC,eAAd,GAAgCF,SAAhC;AACAG,IAAAA,YAAY,GAAGH,SAAf;AACH,GAVD;AAWH,CAZD,E,CAcA;AAGA","sourcesContent":["let display = document.querySelector('.display');\r\nlet colorButtons = document.querySelectorAll('.color');\r\nlet plusButton = document.querySelector('.plus');\r\nlet equalsButton = document.querySelector('.equals');\r\nlet clearButton = document.querySelector('.clear');\r\n\r\nlet expression = '';\r\n\r\ncolorButtons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n        // Get the color name associated with the button\r\n        let colorName = button.textContent;\r\n        // Append the color name to the expression\r\n        expression += colorName;\r\n        // Update the display with the current expression\r\n        display.textContent = expression;\r\n    });\r\n});\r\n\r\nplusButton.addEventListener('click', () => {\r\n    // Append the '+' sign to the expression\r\n    expression += ' + ';\r\n    // Update the display with the current expression\r\n    display.textContent = expression;\r\n});\r\n\r\nequalsButton.addEventListener('click', () => {\r\n    // Evaluate the expression and get the result color name\r\n    let result = evaluateExpression(expression);\r\n    // Update the display with the result color name\r\n    display.textContent = result;\r\n    // Clear the expression\r\n    expression = '';\r\n});\r\n\r\nclearButton.addEventListener('click', () => {\r\n    // Clear the display and the expression\r\n    display.textContent = '';\r\n    expression = '';\r\n});\r\n\r\n// Function to evaluate the color mixing expression\r\nfunction evaluateExpression(expression) {\r\n    try {\r\n        // Remove any spaces from the expression\r\n        let cleanedExpression = expression.replace(/\\s+/g, '');\r\n        // Split the expression into color names and operators\r\n        let parts = cleanedExpression.split('+');\r\n        let result = 'Black'; // Default result color\r\n        // Map color names to their corresponding colors\r\n        let colors = {\r\n            'Red': 'red',\r\n            'Green': 'green',\r\n            'Blue': 'blue',\r\n            'Black': 'black', // You can add more colors as needed\r\n            // Add more color mappings here\r\n        };\r\n        // Loop through the parts and mix the colors\r\n        for (let part of parts) {\r\n            let colorName = part.trim();\r\n            if (colors[colorName]) {\r\n                // Mix the current color with the result color\r\n                result = mixColors(result, colors[colorName]);\r\n            }\r\n        }\r\n        return result;\r\n    } catch (error) {\r\n        console.error('Error evaluating expression:', error);\r\n        return 'Error';\r\n    }\r\n}\r\n\r\n// Function to mix two colors\r\nfunction mixColors(color1, color2) {\r\n    // Implement your color mixing logic here\r\n    // For simplicity, this example assumes you have a predefined set of colors\r\n    // and a function to mix them. You may need to use a library or other method\r\n    // to perform actual color mixing.\r\n    return 'Yellow'; // Replace with actual color mixing logic\r\n}\r\n\r\n// ... (previous code)\r\n\r\nlet clickSound = new Audio(\"click.wav\"); // Preload the audio\r\n\r\ncolorButtons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n        // Play the click sound\r\n        clickSound.currentTime = 0; // Rewind the audio to start\r\n        clickSound.play();\r\n        \r\n        // Get the color code associated with the button\r\n        let colorCode = button.style.backgroundColor;\r\n        // Set the display to the selected color\r\n        display.style.backgroundColor = colorCode;\r\n        currentColor = colorCode;\r\n    });\r\n});\r\n\r\n// ... (rest of your existing code)\r\n\r\n\r\n// ... (rest of your existing code)\r\n"],"file":"calculator.dev.js"}