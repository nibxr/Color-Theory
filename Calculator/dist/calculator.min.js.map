{"version":3,"sources":["calculator.js"],"names":["display","document","querySelector","colorButtons","querySelectorAll","plusButton","clearButton","evaluateExpression","expression","colors","replace","split","result","Red","Green","Blue","Black","parts","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","next","done","colorName","value","trim","mixColors","error","color1","color2","forEach","button","addEventListener","textContent","equalsButton","clickSound","Audio","currentTime","play","colorCode","style","backgroundColor","currentColor"],"mappings":"aAAA,IAAIA,QAAUC,SAASC,cAAc,YACjCC,aAAeF,SAASG,iBAAiB,UADzCJ,WAAUC,SAASC,cAAc,SACjCC,aAAeF,SAASG,cAAAA,WACxBC,YAAaJ,SAASC,cAAc,UAEpCI,WAAW,GAsCf,SAASC,mBAAmBC,GAKpB,IAEA,IACIC,EADJD,EAAAE,QAAA,OAAA,IACaC,MAAA,KACTC,EADS,QAGTH,EAHS,CAITI,IAAS,MACTC,MAAA,QAFAC,KAAQ,OAIZC,MAAA,SAVIC,GAAAA,EAAAA,GAAAA,EAAAA,OAAAA,EAAAA,IAJJ,IAAA,IAAAC,EAAAC,EAAAF,EAAAG,OAAAC,cAAAC,GAAAJ,EAAAC,EAAAI,QAAAC,MAAAF,GAAA,EAAA,CAAA,IAgBQG,EAhBRP,EAAAQ,MAgByBC,OAhBzBlB,EAAAgB,KAewBb,EAAAgB,UAAAhB,EAAAH,EAAAgB,MAXpBR,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,QAAAA,IAAAA,GAAAA,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,QAAAA,GAAAA,EAAAA,MAAAA,GAaA,OAAIR,EACA,MAAAoB,GAEH,OADGjB,QAAMiB,MAAGD,+BAASC,GACrB,SApBL,SAAAD,UAAAE,EAAAC,GAAA,MAAA,SAnCR5B,aAAa6B,QAAQ,SAAAC,GACjBA,EAAOC,iBAAiB,QAAS,WAEzBT,IAAAA,EAAYQ,EAAOE,YAEvB3B,YAAciB,EAEdzB,QAAQmC,YAAc3B,eAK1BH,WAAA6B,iBAAA,QAAA,WACA1B,YAAc,MAFlBR,QAAAmC,YAAA3B,aASI4B,aAAUF,iBAAG3B,QAAmBC,WAEhCR,IAAAA,EAAQmC,mBACR3B,YACAA,QAAU2B,YAAVvB,EAGJN,WAAY4B,KAGR1B,YAAU0B,iBAAV,QAAA,WADAlC,QAAQmC,YAAc,GAK1B3B,WAASD,KACD,IAAA8B,WAAA,IAAAC,MAAA,aAsBAnC,aAAOS,QAAP,SAAAqB,GACFA,EAAOJ,iBAAO,QAAA,WAEZQ,WAAAE,YAAA,EACHF,WAAAG,OAuBG,IAAIC,EAAYR,EAAOS,MAAMC,gBAlBjC3C,QAAA0C,MAAAC,gBAAAF,EACAG,aAAAH","file":"calculator.min.js","sourcesContent":["let display = document.querySelector('.display');\r\nlet colorButtons = document.querySelectorAll('.color');\r\nlet plusButton = document.querySelector('.plus');\r\nlet equalsButton = document.querySelector('.equals');\r\nlet clearButton = document.querySelector('.clear');\r\n\r\nlet expression = '';\r\n\r\ncolorButtons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n        // Get the color name associated with the button\r\n        let colorName = button.textContent;\r\n        // Append the color name to the expression\r\n        expression += colorName;\r\n        // Update the display with the current expression\r\n        display.textContent = expression;\r\n    });\r\n});\r\n\r\nplusButton.addEventListener('click', () => {\r\n    // Append the '+' sign to the expression\r\n    expression += ' + ';\r\n    // Update the display with the current expression\r\n    display.textContent = expression;\r\n});\r\n\r\nequalsButton.addEventListener('click', () => {\r\n    // Evaluate the expression and get the result color name\r\n    let result = evaluateExpression(expression);\r\n    // Update the display with the result color name\r\n    display.textContent = result;\r\n    // Clear the expression\r\n    expression = '';\r\n});\r\n\r\nclearButton.addEventListener('click', () => {\r\n    // Clear the display and the expression\r\n    display.textContent = '';\r\n    expression = '';\r\n});\r\n\r\n// Function to evaluate the color mixing expression\r\nfunction evaluateExpression(expression) {\r\n    try {\r\n        // Remove any spaces from the expression\r\n        let cleanedExpression = expression.replace(/\\s+/g, '');\r\n        // Split the expression into color names and operators\r\n        let parts = cleanedExpression.split('+');\r\n        let result = 'Black'; // Default result color\r\n        // Map color names to their corresponding colors\r\n        let colors = {\r\n            'Red': 'red',\r\n            'Green': 'green',\r\n            'Blue': 'blue',\r\n            'Black': 'black', // You can add more colors as needed\r\n            // Add more color mappings here\r\n        };\r\n        // Loop through the parts and mix the colors\r\n        for (let part of parts) {\r\n            let colorName = part.trim();\r\n            if (colors[colorName]) {\r\n                // Mix the current color with the result color\r\n                result = mixColors(result, colors[colorName]);\r\n            }\r\n        }\r\n        return result;\r\n    } catch (error) {\r\n        console.error('Error evaluating expression:', error);\r\n        return 'Error';\r\n    }\r\n}\r\n\r\n// Function to mix two colors\r\nfunction mixColors(color1, color2) {\r\n    // Implement your color mixing logic here\r\n    // For simplicity, this example assumes you have a predefined set of colors\r\n    // and a function to mix them. You may need to use a library or other method\r\n    // to perform actual color mixing.\r\n    return 'Yellow'; // Replace with actual color mixing logic\r\n}\r\n\r\n// ... (previous code)\r\n\r\nlet clickSound = new Audio(\"click.wav\"); // Preload the audio\r\n\r\ncolorButtons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n        // Play the click sound\r\n        clickSound.currentTime = 0; // Rewind the audio to start\r\n        clickSound.play();\r\n        \r\n        // Get the color code associated with the button\r\n        let colorCode = button.style.backgroundColor;\r\n        // Set the display to the selected color\r\n        display.style.backgroundColor = colorCode;\r\n        currentColor = colorCode;\r\n    });\r\n});\r\n\r\n// ... (rest of your existing code)\r\n\r\n\r\n// ... (rest of your existing code)\r\n"]}